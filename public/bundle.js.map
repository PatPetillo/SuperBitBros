{"version":3,"sources":["webpack:///webpack/bootstrap ba206f457a8c2143ea7b","webpack:///./client/index.js"],"names":["console","log"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;AACAA,QAAQC,GAAR,CAAY,CAAZ;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,I","file":"./public/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ba206f457a8c2143ea7b","// import Phaser from 'phaser';\nconsole.log(1)\n// var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });\n\n// function preload() {\n\n//     game.load.image('sky', 'assets/sky.png');\n//     game.load.image('ground', 'assets/platform.png');\n//     game.load.image('star', 'assets/star.png');\n//     game.load.spritesheet('dude', 'assets/dude.png', 32, 48);\n\n// }\n\n// var player;\n// var platforms;\n// var cursors;\n\n// var stars;\n// var score = 0;\n// var scoreText;\n\n// function create() {\n\n//     //  We're going to be using physics, so enable the Arcade Physics system\n//     game.physics.startSystem(Phaser.Physics.ARCADE);\n\n//     //  A simple background for our game\n//     game.add.sprite(0, 0, 'sky');\n\n//     //  The platforms group contains the ground and the 2 ledges we can jump on\n//     platforms = game.add.group();\n\n//     //  We will enable physics for any object that is created in this group\n//     platforms.enableBody = true;\n\n//     // Here we create the ground.\n//     var ground = platforms.create(0, game.world.height - 64, 'ground');\n\n//     //  Scale it to fit the width of the game (the original sprite is 400x32 in size)\n//     ground.scale.setTo(2, 2);\n\n//     //  This stops it from falling away when you jump on it\n//     ground.body.immovable = true;\n\n//     //  Now let's create two ledges\n//     var ledge = platforms.create(400, 400, 'ground');\n//     ledge.body.immovable = true;\n\n//     ledge = platforms.create(-150, 250, 'ground');\n//     ledge.body.immovable = true;\n\n//     // The player and its settings\n//     player = game.add.sprite(32, game.world.height - 150, 'dude');\n\n//     //  We need to enable physics on the player\n//     game.physics.arcade.enable(player);\n\n//     //  Player physics properties. Give the little guy a slight bounce.\n//     player.body.bounce.y = 0.2;\n//     player.body.gravity.y = 300;\n//     player.body.collideWorldBounds = true;\n\n//     //  Our two animations, walking left and right.\n//     player.animations.add('left', [0, 1, 2, 3], 10, true);\n//     player.animations.add('right', [5, 6, 7, 8], 10, true);\n\n//     //  Finally some stars to collect\n//     stars = game.add.group();\n\n//     //  We will enable physics for any star that is created in this group\n//     stars.enableBody = true;\n\n//     //  Here we'll create 12 of them evenly spaced apart\n//     for (var i = 0; i < 12; i++) {\n//         //  Create a star inside of the 'stars' group\n//         var star = stars.create(i * 70, 0, 'star');\n\n//         //  Let gravity do its thing\n//         star.body.gravity.y = 300;\n\n//         //  This just gives each star a slightly random bounce value\n//         star.body.bounce.y = 0.7 + Math.random() * 0.2;\n//     }\n\n//     //  The score\n//     scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });\n\n//     //  Our controls.\n//     cursors = game.input.keyboard.createCursorKeys();\n\n// }\n\n// function update() {\n\n//     //  Collide the player and the stars with the platforms\n//     game.physics.arcade.collide(player, platforms);\n//     game.physics.arcade.collide(stars, platforms);\n\n//     //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\n//     game.physics.arcade.overlap(player, stars, collectStar, null, this);\n\n//     //  Reset the players velocity (movement)\n//     player.body.velocity.x = 0;\n\n//     if (cursors.left.isDown) {\n//         //  Move to the left\n//         player.body.velocity.x = -150;\n\n//         player.animations.play('left');\n//     }\n//     else if (cursors.right.isDown) {\n//         //  Move to the right\n//         player.body.velocity.x = 150;\n\n//         player.animations.play('right');\n//     }\n//     else {\n//         //  Stand still\n//         player.animations.stop();\n\n//         player.frame = 4;\n//     }\n\n//     //  Allow the player to jump if they are touching the ground.\n//     if (cursors.up.isDown && player.body.touching.down) {\n//         player.body.velocity.y = -350;\n//     }\n\n// }\n\n// function collectStar(player, star) {\n\n//     // Removes the star from the screen\n//     star.kill();\n\n//     //  Add and update the score\n//     score += 10;\n//     scoreText.text = 'Score: ' + score;\n\n// }\n\n\n\n// WEBPACK FOOTER //\n// ./client/index.js"],"sourceRoot":""}